{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"metadata":{"id":"It_s7n2VWNwu"},"cell_type":"markdown","source":["## Import Libraries"]},{"metadata":{"id":"v-ACSOFOWNwx","executionInfo":{"status":"ok","timestamp":1668622681300,"user_tz":-60,"elapsed":3,"user":{"displayName":"Otto F. Wagner","userId":"08814774206121454278"}}},"cell_type":"code","source":["# Keras Datasets: \n","#    https://jovianlin.io/datasets-within-keras/\n","from keras.datasets import cifar10\n","\n","from keras.models import Sequential\n","from keras.layers.core import Dense, Dropout, Activation, Flatten\n","from keras.layers.convolutional import Conv2D, MaxPooling2D\n","from keras.utils import np_utils\n","\n","# Set random seed (for reproducibility):\n","#     https://machinelearningmastery.com/reproducible-results-neural-networks-keras/\n","import numpy as np\n","np.random.seed(42)\n","\n","import time\n","\n","import matplotlib.pyplot as plt\n","\n","from random import randint"],"execution_count":38,"outputs":[]},{"metadata":{"id":"rMqEwyN6WNw1"},"cell_type":"markdown","source":["## Load Data"]},{"metadata":{"id":"vDPDDXhsWNw2"},"cell_type":"markdown","source":["#### Number of clases"]},{"metadata":{"id":"RzbqtpcrWNw4","executionInfo":{"status":"ok","timestamp":1668621509584,"user_tz":-60,"elapsed":206,"user":{"displayName":"Otto F. Wagner","userId":"08814774206121454278"}}},"cell_type":"code","source":["num_classes = 10"],"execution_count":5,"outputs":[]},{"metadata":{"id":"XUnqqhxWWNw8"},"cell_type":"markdown","source":["#### Load training and test datasets"]},{"metadata":{"id":"hE5TlXA5WNw-","executionInfo":{"status":"ok","timestamp":1668622327147,"user_tz":-60,"elapsed":1625,"user":{"displayName":"Otto F. Wagner","userId":"08814774206121454278"}}},"cell_type":"code","source":["(X_train, y_train), (X_test, y_test) = cifar10.load_data()\n","\n","labels=['airplane', 'automobile', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck']"],"execution_count":27,"outputs":[]},{"metadata":{"id":"Xb0fQ5IhWNxC"},"cell_type":"markdown","source":["#### Print shape of the data"]},{"metadata":{"id":"3nMpF9xVWNxD","colab":{"base_uri":"https://localhost:8080/"},"outputId":"555a9304-60e2-48a5-82c5-95daf3aabd75","executionInfo":{"status":"ok","timestamp":1668622331305,"user_tz":-60,"elapsed":488,"user":{"displayName":"Otto F. Wagner","userId":"08814774206121454278"}}},"cell_type":"code","source":["print(X_train.shape)\n","print(y_train.shape)\n","print(X_test.shape)\n","print(y_test.shape)"],"execution_count":28,"outputs":[{"output_type":"stream","name":"stdout","text":["(50000, 32, 32, 3)\n","(50000, 1)\n","(10000, 32, 32, 3)\n","(10000, 1)\n"]}]},{"cell_type":"code","source":["n_row= randint(0,X_train.shape[0]+1)\n","\n","image=X_train[n_row]\n","plt.imshow(image)\n","\n","print(\"this is a/an\", labels[y_train[n_row][0]])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":285},"id":"tTsUjzX7oAOO","executionInfo":{"status":"ok","timestamp":1668622760684,"user_tz":-60,"elapsed":412,"user":{"displayName":"Otto F. Wagner","userId":"08814774206121454278"}},"outputId":"f0a78c01-bf8e-40a7-83bc-28ec698c4bad"},"execution_count":46,"outputs":[{"output_type":"stream","name":"stdout","text":["this is a/an airplane\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["type(y_train[n_row])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-YFuFnVupMLC","executionInfo":{"status":"ok","timestamp":1668622379343,"user_tz":-60,"elapsed":212,"user":{"displayName":"Otto F. Wagner","userId":"08814774206121454278"}},"outputId":"3789151d-cdee-4483-8d39-3231bf32141a"},"execution_count":30,"outputs":[{"output_type":"execute_result","data":{"text/plain":["numpy.ndarray"]},"metadata":{},"execution_count":30}]},{"metadata":{"id":"ZqVoC2gHWNxK"},"cell_type":"markdown","source":["#### Format Y data: convert class vectors to binary class matrices"]},{"metadata":{"id":"BRO8JR66WNxL","executionInfo":{"status":"ok","timestamp":1668621516390,"user_tz":-60,"elapsed":202,"user":{"displayName":"Otto F. Wagner","userId":"08814774206121454278"}}},"cell_type":"code","source":["y_train = np_utils.to_categorical(y_train, num_classes)\n","y_test = np_utils.to_categorical(y_test, num_classes)"],"execution_count":6,"outputs":[]},{"metadata":{"id":"5vLPRm3sWNxQ"},"cell_type":"markdown","source":["## Plot Training Results"]},{"metadata":{"id":"3bMQSb5qWNxS"},"cell_type":"markdown","source":["#### Import plot libraries"]},{"metadata":{"id":"M6gFIPKQWNxT","executionInfo":{"status":"ok","timestamp":1668621522149,"user_tz":-60,"elapsed":204,"user":{"displayName":"Otto F. Wagner","userId":"08814774206121454278"}}},"cell_type":"code","source":["%matplotlib inline\n","import matplotlib.pyplot as plt\n","\n","# Optional: Seaborn is a Python data visualization library based on matplotlib \n","#    https://seaborn.pydata.org/\n","import seaborn as sns\n","sns.set()"],"execution_count":7,"outputs":[]},{"metadata":{"id":"Yf-OF_nnWNxY"},"cell_type":"markdown","source":["#### Plot method"]},{"metadata":{"id":"74x-f-qWWNxZ","executionInfo":{"status":"ok","timestamp":1668621528035,"user_tz":-60,"elapsed":199,"user":{"displayName":"Otto F. Wagner","userId":"08814774206121454278"}}},"cell_type":"code","source":["def plot_history(history):\n","    \n","    # Plot training & validation accuracy values\n","    plt.plot(history.history['acc'])\n","    plt.plot(history.history['val_acc'])\n","    plt.title('Model accuracy')\n","    plt.ylabel('Accuracy')\n","    plt.xlabel('Epoch')\n","    plt.legend(['Train', 'Test'], loc='upper left')\n","    plt.show()\n","\n","    # Plot training & validation loss values\n","    plt.plot(history.history['loss'])\n","    plt.plot(history.history['val_loss'])\n","    plt.title('Model loss')\n","    plt.ylabel('Loss')\n","    plt.xlabel('Epoch')\n","    plt.legend(['Train', 'Test'], loc='upper left')\n","    plt.show()"],"execution_count":8,"outputs":[]},{"metadata":{"id":"Sf0l6eWSWNxe"},"cell_type":"markdown","source":["## Convolutional Model Definition"]},{"metadata":{"id":"2BIU5iE8WNxg"},"cell_type":"code","source":["# Compile method doc: https://keras.io/models/sequential/\n","# Optimizers doc: https://keras.io/optimizers/"],"execution_count":null,"outputs":[]},{"metadata":{"id":"0fu3owaMWNxk","executionInfo":{"status":"ok","timestamp":1668621535353,"user_tz":-60,"elapsed":391,"user":{"displayName":"Otto F. Wagner","userId":"08814774206121454278"}}},"cell_type":"code","source":["# Input image dimensions\n","_, img_rows, img_cols, img_channels = X_train.shape"],"execution_count":9,"outputs":[]},{"metadata":{"id":"rN4LFpoSWNxm","executionInfo":{"status":"ok","timestamp":1668621539854,"user_tz":-60,"elapsed":206,"user":{"displayName":"Otto F. Wagner","userId":"08814774206121454278"}}},"cell_type":"code","source":["def create_model():\n","    model = Sequential()\n","\n","    model.add(Conv2D(32, (3, 3), padding='same', input_shape=(img_rows, img_cols, img_channels), data_format='channels_last'))\n","    model.add(Activation('relu'))\n","    model.add(Conv2D(32, (3, 3), padding='same'))\n","    model.add(Activation('relu'))\n","    model.add(MaxPooling2D(pool_size=(2, 2)))\n","    model.add(Dropout(0.25))\n","\n","    model.add(Conv2D(16, (3, 3), padding='same'))\n","    model.add(Activation('relu'))\n","    model.add(Conv2D(16, (3, 3), padding='same'))\n","    model.add(Activation('relu'))\n","    model.add(MaxPooling2D(pool_size=(2, 2)))\n","    model.add(Dropout(0.25))\n","    \n","    model.add(Conv2D(8, (3, 3), padding='same'))\n","    model.add(Activation('relu'))\n","    model.add(Conv2D(8, (3, 3), padding='same'))\n","    model.add(Activation('relu'))\n","    model.add(MaxPooling2D(pool_size=(2, 2)))\n","    model.add(Dropout(0.25))\n","\n","    model.add(Flatten())\n","    model.add(Dense(64))\n","    model.add(Activation('relu'))\n","    model.add(Dropout(0.25))\n","    model.add(Dense(num_classes))\n","    model.add(Activation('softmax'))\n","    \n","    model.compile(loss='categorical_crossentropy', \n","                  optimizer='adam', \n","                  metrics=['accuracy'])\n","    \n","    return model"],"execution_count":10,"outputs":[]},{"metadata":{"id":"TE_JgfoRWNxv"},"cell_type":"markdown","source":["## Create a model and print model-summary"]},{"metadata":{"id":"lMhb_WCxWNxx","colab":{"base_uri":"https://localhost:8080/"},"outputId":"ebd26df2-7ea5-4f6c-ea39-157a150b2399","executionInfo":{"status":"ok","timestamp":1668621548844,"user_tz":-60,"elapsed":3908,"user":{"displayName":"Otto F. Wagner","userId":"08814774206121454278"}}},"cell_type":"code","source":["model=create_model()\n","model.summary()"],"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," conv2d (Conv2D)             (None, 32, 32, 32)        896       \n","                                                                 \n"," activation (Activation)     (None, 32, 32, 32)        0         \n","                                                                 \n"," conv2d_1 (Conv2D)           (None, 32, 32, 32)        9248      \n","                                                                 \n"," activation_1 (Activation)   (None, 32, 32, 32)        0         \n","                                                                 \n"," max_pooling2d (MaxPooling2D  (None, 16, 16, 32)       0         \n"," )                                                               \n","                                                                 \n"," dropout (Dropout)           (None, 16, 16, 32)        0         \n","                                                                 \n"," conv2d_2 (Conv2D)           (None, 16, 16, 16)        4624      \n","                                                                 \n"," activation_2 (Activation)   (None, 16, 16, 16)        0         \n","                                                                 \n"," conv2d_3 (Conv2D)           (None, 16, 16, 16)        2320      \n","                                                                 \n"," activation_3 (Activation)   (None, 16, 16, 16)        0         \n","                                                                 \n"," max_pooling2d_1 (MaxPooling  (None, 8, 8, 16)         0         \n"," 2D)                                                             \n","                                                                 \n"," dropout_1 (Dropout)         (None, 8, 8, 16)          0         \n","                                                                 \n"," conv2d_4 (Conv2D)           (None, 8, 8, 8)           1160      \n","                                                                 \n"," activation_4 (Activation)   (None, 8, 8, 8)           0         \n","                                                                 \n"," conv2d_5 (Conv2D)           (None, 8, 8, 8)           584       \n","                                                                 \n"," activation_5 (Activation)   (None, 8, 8, 8)           0         \n","                                                                 \n"," max_pooling2d_2 (MaxPooling  (None, 4, 4, 8)          0         \n"," 2D)                                                             \n","                                                                 \n"," dropout_2 (Dropout)         (None, 4, 4, 8)           0         \n","                                                                 \n"," flatten (Flatten)           (None, 128)               0         \n","                                                                 \n"," dense (Dense)               (None, 64)                8256      \n","                                                                 \n"," activation_6 (Activation)   (None, 64)                0         \n","                                                                 \n"," dropout_3 (Dropout)         (None, 64)                0         \n","                                                                 \n"," dense_1 (Dense)             (None, 10)                650       \n","                                                                 \n"," activation_7 (Activation)   (None, 10)                0         \n","                                                                 \n","=================================================================\n","Total params: 27,738\n","Trainable params: 27,738\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}]},{"metadata":{"id":"W5TGSaBpWNx2"},"cell_type":"markdown","source":["## Example of Training:"]},{"metadata":{"id":"VnyqgNZkWNx3","executionInfo":{"status":"ok","timestamp":1668621560978,"user_tz":-60,"elapsed":191,"user":{"displayName":"Otto F. Wagner","userId":"08814774206121454278"}}},"cell_type":"code","source":["batch_size = 128\n","nb_epoch = 10\n","\n","import tensorflow as tf\n","\n","#tf.Session(config=tf.ConfigProto(intra_op_parallelism_threads=4))\n"],"execution_count":12,"outputs":[]},{"metadata":{"id":"byIaW16GWNyA","colab":{"base_uri":"https://localhost:8080/"},"outputId":"6bdea716-3092-4ab1-b42a-a55889b695e1","executionInfo":{"status":"ok","timestamp":1668621648760,"user_tz":-60,"elapsed":83738,"user":{"displayName":"Otto F. Wagner","userId":"08814774206121454278"}}},"cell_type":"code","source":["model = create_model()\n","\n","# Keras fit function documentation: https://keras.io/models/sequential/\n","history = model.fit(X_train, y_train,\n","                    batch_size=batch_size,\n","                    epochs=nb_epoch,\n","                    verbose=1,\n","                    validation_data=(X_test, y_test),\n","                    shuffle=True)"],"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/10\n","391/391 [==============================] - 14s 11ms/step - loss: 2.2988 - accuracy: 0.1444 - val_loss: 2.0795 - val_accuracy: 0.2225\n","Epoch 2/10\n","391/391 [==============================] - 4s 10ms/step - loss: 1.9279 - accuracy: 0.2511 - val_loss: 1.7491 - val_accuracy: 0.3310\n","Epoch 3/10\n","391/391 [==============================] - 4s 10ms/step - loss: 1.7234 - accuracy: 0.3430 - val_loss: 1.5349 - val_accuracy: 0.4250\n","Epoch 4/10\n","391/391 [==============================] - 4s 10ms/step - loss: 1.5961 - accuracy: 0.4021 - val_loss: 1.4933 - val_accuracy: 0.4505\n","Epoch 5/10\n","391/391 [==============================] - 4s 10ms/step - loss: 1.5234 - accuracy: 0.4322 - val_loss: 1.4333 - val_accuracy: 0.4741\n","Epoch 6/10\n","391/391 [==============================] - 4s 10ms/step - loss: 1.4661 - accuracy: 0.4563 - val_loss: 1.4140 - val_accuracy: 0.4935\n","Epoch 7/10\n","391/391 [==============================] - 4s 10ms/step - loss: 1.4209 - accuracy: 0.4754 - val_loss: 1.3092 - val_accuracy: 0.5234\n","Epoch 8/10\n","391/391 [==============================] - 4s 10ms/step - loss: 1.3823 - accuracy: 0.4965 - val_loss: 1.3170 - val_accuracy: 0.5245\n","Epoch 9/10\n","391/391 [==============================] - 4s 10ms/step - loss: 1.3363 - accuracy: 0.5181 - val_loss: 1.3033 - val_accuracy: 0.5422\n","Epoch 10/10\n","391/391 [==============================] - 4s 10ms/step - loss: 1.2905 - accuracy: 0.5332 - val_loss: 1.2146 - val_accuracy: 0.5638\n"]}]},{"metadata":{"id":"Zwm1iLyjWNyG"},"cell_type":"markdown","source":["#### Evaluate trained model with test data"]},{"metadata":{"id":"lTEKz9EzWNyK","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1668621654821,"user_tz":-60,"elapsed":1547,"user":{"displayName":"Otto F. Wagner","userId":"08814774206121454278"}},"outputId":"3dbbad9e-261f-4dd3-96e1-b3e377f8f6a5"},"cell_type":"code","source":["score = model.evaluate(X_test, y_test)\n","print('Test loss:', score[0])\n","print('Test accuracy:', score[1])"],"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["313/313 [==============================] - 1s 4ms/step - loss: 1.2146 - accuracy: 0.5638\n","Test loss: 1.2146449089050293\n","Test accuracy: 0.5637999773025513\n"]}]},{"metadata":{"id":"vCjNS4dtYsui"},"cell_type":"markdown","source":["## Batch 8"]},{"metadata":{"id":"e54cwWaGYsun","outputId":"1082add1-d186-48cf-a2b2-acf174359d2d","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1668621991001,"user_tz":-60,"elapsed":323966,"user":{"displayName":"Otto F. Wagner","userId":"08814774206121454278"}}},"cell_type":"code","source":["batch_size = 8\n","nb_epoch = 10\n","\n","\n","\n","modelo = create_model()\n","\n","\n","# tiempo inicial\n","t0 = time.time()\n","# Keras fit function documentation: https://keras.io/models/sequential/\n","history = modelo.fit(X_train, y_train,\n","                    batch_size=batch_size,\n","                    epochs=nb_epoch,\n","                    verbose=2,\n","                    validation_data=(X_test, y_test),\n","                    shuffle=True)\n","tf =  time.time()"],"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/10\n","6250/6250 - 29s - loss: 2.0732 - accuracy: 0.2184 - val_loss: 1.7697 - val_accuracy: 0.3274 - 29s/epoch - 5ms/step\n","Epoch 2/10\n","6250/6250 - 30s - loss: 1.7852 - accuracy: 0.3249 - val_loss: 1.6644 - val_accuracy: 0.3764 - 30s/epoch - 5ms/step\n","Epoch 3/10\n","6250/6250 - 28s - loss: 1.7111 - accuracy: 0.3573 - val_loss: 1.6192 - val_accuracy: 0.3993 - 28s/epoch - 5ms/step\n","Epoch 4/10\n","6250/6250 - 28s - loss: 1.6668 - accuracy: 0.3751 - val_loss: 1.5810 - val_accuracy: 0.4084 - 28s/epoch - 4ms/step\n","Epoch 5/10\n","6250/6250 - 28s - loss: 1.6311 - accuracy: 0.3908 - val_loss: 1.5045 - val_accuracy: 0.4283 - 28s/epoch - 4ms/step\n","Epoch 6/10\n","6250/6250 - 32s - loss: 1.6085 - accuracy: 0.4044 - val_loss: 1.5748 - val_accuracy: 0.4227 - 32s/epoch - 5ms/step\n","Epoch 7/10\n","6250/6250 - 31s - loss: 1.5862 - accuracy: 0.4123 - val_loss: 1.4506 - val_accuracy: 0.4635 - 31s/epoch - 5ms/step\n","Epoch 8/10\n","6250/6250 - 30s - loss: 1.5689 - accuracy: 0.4208 - val_loss: 1.4660 - val_accuracy: 0.4588 - 30s/epoch - 5ms/step\n","Epoch 9/10\n","6250/6250 - 30s - loss: 1.5678 - accuracy: 0.4225 - val_loss: 1.5584 - val_accuracy: 0.4350 - 30s/epoch - 5ms/step\n","Epoch 10/10\n","6250/6250 - 28s - loss: 1.5567 - accuracy: 0.4236 - val_loss: 1.4931 - val_accuracy: 0.4536 - 28s/epoch - 4ms/step\n"]}]},{"metadata":{"id":"nnZLezJUYsur"},"cell_type":"markdown","source":["#### Evaluate trained model with test data"]},{"metadata":{"id":"72Z7BCTfYsur","outputId":"f0112d00-cf9f-48fd-8844-c7ef92ba4d26","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1668622005494,"user_tz":-60,"elapsed":1757,"user":{"displayName":"Otto F. Wagner","userId":"08814774206121454278"}}},"cell_type":"code","source":["score = modelo.evaluate(X_test, y_test)\n","time_delta = tf-t0\n","exec(\"batch_size_\" + str(batch_size) + \"= batch_size\")\n","exec(\"test_loss_\" + str(batch_size) + \"= score[0]\")\n","exec(\"test_acc_\" + str(batch_size) + \"= score[1]\")\n","exec(\"td_\" + str(batch_size) + \"= time_delta\")\n","\n","\n","print(\"batch_size: \", batch_size, \", score: \", score, \", time_delta: \", time_delta)"],"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["313/313 [==============================] - 1s 4ms/step - loss: 1.4931 - accuracy: 0.4536\n","batch_size:  8 , score:  [1.4931297302246094, 0.4535999894142151] , time_delta:  323.17459321022034\n"]}]}]}